Notes :

Imagepull policy
HPA
Configmap
secrets
Livenss probe
Readyness probe
Taints and tolerations
Node selector
Affinity
mounting Volumes to a specifc path
strategy
priorityClassName
podDisruptionBudget
command args


init conatiners
sidecar conatiners








annotations:
    rollme:


Variable from runtime conatiner :

valueFrom:
   fieldRef: 
     apiVersion: v1
    fieldPath: status.hostIP

















Config maps :

--> used to staore no sensitive Env variables 
--> any configuration file like nginx.conf 
--> does not supprt base64 encoding or decoding


Use cases :

1) Env variabls - key:value  - can reference values in pod/deployment defination file  ex:


env:
  - name: USER
     valueFrom:
       configMapKeyRef:
         name: configmap-1
         key: name

2) Create/mount a file in specific path  - we need to use Volume mounts and volumes  

3) Can create confog map from external data file 

kubectl create configmap config-2 --namespace=demo --from-file=nginx.conf=nginx.txt

4) list Env varibales set from config map 

envFrom:
   - configMapRef:
    name: config-1




Creating config map with different fileds under "data ""

apiVersion: v1
kind: ConfigMap
metadata:
  name: configmap-1
  namespace: demo-1
data:
  # key:value 
  name: "sai"
  place: "nidigallu"

  # file-like keys  -- >   values/data inside a file called "user.details"
  user.details:
   name:sai
   place:nidigallu

  nginx-config.conf: |     --> this will create file  in mounted path 
    # Put your Nginx configuration here
    server {
      listen 80;
      server_name example.com;

      location / {
        root /usr/share/nginx/html;
        index index.html;
      }
    }




Using config map inside a pod example block like ENV 

for Key:value  type 

env:
  - name: USER
     valueFrom:
       configMapKeyRef:
         name: configmap-1
         key: name


as a volume mount create/attach file in the specified location  it has 2 steps 1) volume mounts 2) define volume 

spec:
  containers:
    volumeMounts:
    - name: nginx-config
       mountPath: "/etc/nginx/conf.d/"
       readOnly: true
volumes:
- name: nginx-config
  configMap:
    name: configmap-1
    items:
      - key: "nginx-config.conf"
        path: "nginx.conf"




/opt


to create config map from external file :

kubectl create configmap config-2 --namespace=demo --from-file=nginx.conf=nginx.txt

to get Yaml file form config map :

kubectl get configmap config-1 -o yaml -n demo > con.yaml


Task 1 :

1) Deploment file  with alpine linux image 
2) Config map - list of  env variable , create/mount nginx config file in /opt
3) secrets - set API key , Password encode as env variables , create/mount json key 

try Creating config/secret from external files and inline yaml files 





echo -n 'birdsarentreal' | base64

base64 -w 0 nginx.conf > nginx.txt


kubectl create secret generic my-secret  --from-literal=encoded-secret=base64encodedvalue









        















